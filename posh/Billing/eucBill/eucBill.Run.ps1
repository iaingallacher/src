#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 23b6ad75-dd07-46a7-b180-7f8c1e4dc26a
# Source File: C:\Users\igallacher\Documents\GitHub\src\posh\Billing\eucBill\eucBill.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.63
     Generated on:       24/07/2014 4:43 PM
     Generated by:       iaingallacher
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2014
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$frmMain = New-Object 'System.Windows.Forms.Form'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$lblEndBill = New-Object 'System.Windows.Forms.Label'
	$lblStartBill = New-Object 'System.Windows.Forms.Label'
	$dateEndBill = New-Object 'System.Windows.Forms.DateTimePicker'
	$dateStartBill = New-Object 'System.Windows.Forms.DateTimePicker'
	$lblCSVFile = New-Object 'System.Windows.Forms.Label'
	$btnProcess = New-Object 'System.Windows.Forms.Button'
	$lblRows = New-Object 'System.Windows.Forms.Label'
	$dgCSV = New-Object 'System.Windows.Forms.DataGrid'
	$btnOpenCSV = New-Object 'System.Windows.Forms.Button'
	$ofdSelectCSV = New-Object 'System.Windows.Forms.OpenFileDialog'
	$labelBillPeriodStart = New-Object 'System.Windows.Forms.Label'
	$labelBillPeriodEnd = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$OnLoadFormEvent={
	#TODO: Initialize Form Controls here
	$dateStartBill.Value = $dateStartBill.Value.Date.AddDays(-30)
	}
	
	
	
	
	
	$ofdSelectCSV_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	$btnOpenCSV_Click= {
		
		
		$ofdSelectCSV.ShowDialog()
		$lblCSVFile.Text = $ofdSelectCSV.FileName
		$frmMain.Text = "End User Compute Bill - " + $ofdSelectCSV.FileName
		
		
	}
	
	#######################
	function Get-Type
	{
		param ($type)
		
		$types = @(
		'System.Boolean',
		'System.Byte[]',
		'System.Byte',
		'System.Char',
		'System.Datetime',
		'System.Decimal',
		'System.Double',
		'System.Guid',
		'System.Int16',
		'System.Int32',
		'System.Int64',
		'System.Single',
		'System.UInt16',
		'System.UInt32',
		'System.UInt64')
		
		if ($types -contains $type)
		{
			Write-Output "$type"
		}
		else
		{
			Write-Output 'System.String'
			
		}
	} #Get-Type
	
	function Process-CSV
	{
		param ($csvFile)
		
		$billCSV = @()
		
		$begin = $dateStartBill.Value.Date
		$end = $dateEndBill.Value.Date
			
		$billCSV = Import-Csv $csvFile | where{
			$_.disabled -ne $true -and
			$_.'Last Logon Date' -ne " " -and
			($_.'Last Logon Date' -as [DateTime]) -ge $begin -and
			($_.'Last Logon Date' -as [DateTime]) -le $end
		}
		
		$billCSVDT = $billCSV | Out-DataTable
		
		
		$dgCSV.DataSource = $billCSVDT
		
		
		
		Write-Host "All = " $billCSV.Length
		
		$billResources = @()
		$billServiceAccounts = @()
		$billASGStaff = @()
		$billBase = @()
		$billStandard = @()
		$billPremium = @()
		$billVIP = @()
		$billsharedMB = @()
		
		foreach ($element in $billCSV)
		{
			if ($element.'Distinguished Name' -like "*resources*")
			{		
				$billResources += $element
			}
			
			elseif  ($element.'Distinguished Name' -like "*serviceaccounts*")
			{
				$billServiceAccounts += $element
			}
			
			elseif ($element.'Distinguished Name' -like "*asg staff*")
			{
				$billASGStaff += $element
			}
			elseif ($element.'Mailbox Store' -like "*resources*" -or $element.'Mailbox Store' -like "*shared*" -or $element.'Mailbox Store' -like "*journal*")
			{
				$billSharedMB += $element
			}
			else
			{
				$billBase += $element
			}
			
		}
		$lblRows.Text = "Total $(@($billCSVDT).count) - Base($($billBase.Length)) Resource Accounts($($billResources.Length)) Service Accounts($($billServiceAccounts.Length)) ASG Staff($($billASGStaff.Length)) Shared Mailbox($($billSharedMB.Length))"
		$frmMain.Refresh()
		Write-Host "Resources= " $billResources.Length
		Write-Host "Service Accounts = " $billServiceAccounts.Length
		Write-Host "ASG Staff = " $billASGStaff.Length
		Write-Host "Base = " $billBase.Length
		Write-Host "SharedMB = " $billSharedMB.Length
		
		
			
		<#foreach ($item in $billCSV)
		{
			if ($item.'Last Logon Date' -ne " ")
			{
				$t = $item.'Last Logon Date' -as [DateTime]
				$tt = [DateTime]$t
				Write-Host $item.Name $tt.Day $tt.Month $tt.Year
			}
		}#>
		
	}#Process-CSV
	
	#######################
	<# 
	.SYNOPSIS 
	Creates a DataTable for an object 
	.DESCRIPTION 
	Creates a DataTable based on an objects properties. 
	.INPUTS 
	Object 
	    Any object can be piped to Out-DataTable 
	.OUTPUTS 
	   System.Data.DataTable 
	.EXAMPLE 
	$dt = Get-psdrive| Out-DataTable 
	This example creates a DataTable from the properties of Get-psdrive and assigns output to $dt variable 
	.NOTES 
	Adapted from script by Marc van Orsouw see link 
	Version History 
	v1.0  - Chad Miller - Initial Release 
	v1.1  - Chad Miller - Fixed Issue with Properties 
	v1.2  - Chad Miller - Added setting column datatype by property as suggested by emp0 
	v1.3  - Chad Miller - Corrected issue with setting datatype on empty properties 
	v1.4  - Chad Miller - Corrected issue with DBNull 
	v1.5  - Chad Miller - Updated example 
	v1.6  - Chad Miller - Added column datatype logic with default to string 
	v1.7 - Chad Miller - Fixed issue with IsArray 
	.LINK 
	http://thepowershellguy.com/blogs/posh/archive/2007/01/21/powershell-gui-scripblock-monitor-script.aspx 
	#>
	function Out-DataTable
	{
		[CmdletBinding()]
		param ([Parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true)] [PSObject[]]$InputObject)
		
		Begin
		{
			$dt = new-object Data.datatable
			$First = $true
		}
		Process
		{
			foreach ($object in $InputObject)
			{
				$DR = $DT.NewRow()
				foreach ($property in $object.PsObject.get_properties())
				{
					if ($first)
					{
						$Col = new-object Data.DataColumn
						$Col.ColumnName = $property.Name.ToString()
						if ($property.value)
						{
							if ($property.value -isnot [System.DBNull])
							{
								$Col.DataType = [System.Type]::GetType("$(Get-Type $property.TypeNameOfValue)")
							}
						}
						$DT.Columns.Add($Col)
					}
					if ($property.Gettype().IsArray)
					{
						$DR.Item($property.Name) = $property.value | ConvertTo-XML -AS String -NoTypeInformation -Depth 1
					}
					else
					{
						$DR.Item($property.Name) = $property.value
					}
				}
				$DT.Rows.Add($DR)
				$First = $false
			}
		}
		
		End
		{
			Write-Output @(, ($dt))
		}
		
	} #Out-DataTable
		
	
	
	$btnProcess_Click={
		
		Process-CSV($lblCSVFile.Text)
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$frmMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_dateEndBill = $dateEndBill.Value
		$script:MainForm_dateStartBill = $dateStartBill.Value
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$btnProcess.remove_Click($btnProcess_Click)
			$btnOpenCSV.remove_Click($btnOpenCSV_Click)
			$frmMain.remove_Load($OnLoadFormEvent)
			$ofdSelectCSV.remove_FileOk($ofdSelectCSV_FileOk)
			$frmMain.remove_Load($Form_StateCorrection_Load)
			$frmMain.remove_Closing($Form_StoreValues_Closing)
			$frmMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$frmMain.SuspendLayout()
	$groupbox2.SuspendLayout()
	$dgCSV.BeginInit()
	#
	# frmMain
	#
	$frmMain.Controls.Add($groupbox2)
	$frmMain.Controls.Add($lblCSVFile)
	$frmMain.Controls.Add($btnProcess)
	$frmMain.Controls.Add($lblRows)
	$frmMain.Controls.Add($dgCSV)
	$frmMain.Controls.Add($btnOpenCSV)
	$frmMain.ClientSize = '966, 676'
	$frmMain.Name = "frmMain"
	$frmMain.StartPosition = 'CenterScreen'
	$frmMain.Text = "End User Compute Bill"
	$frmMain.add_Load($OnLoadFormEvent)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($lblEndBill)
	$groupbox2.Controls.Add($lblStartBill)
	$groupbox2.Controls.Add($dateEndBill)
	$groupbox2.Controls.Add($dateStartBill)
	$groupbox2.Font = "Microsoft Sans Serif, 7.8pt"
	$groupbox2.Location = '602, 12'
	$groupbox2.Name = "groupbox2"
	$groupbox2.Size = '332, 188'
	$groupbox2.TabIndex = 11
	$groupbox2.TabStop = $False
	$groupbox2.Text = "Billing Period"
	#
	# lblEndBill
	#
	$lblEndBill.Location = '9, 77'
	$lblEndBill.Name = "lblEndBill"
	$lblEndBill.Size = '100, 23'
	$lblEndBill.TabIndex = 10
	$lblEndBill.Text = "End"
	#
	# lblStartBill
	#
	$lblStartBill.Location = '5, 24'
	$lblStartBill.Name = "lblStartBill"
	$lblStartBill.Size = '100, 23'
	$lblStartBill.TabIndex = 9
	$lblStartBill.Text = "Start"
	#
	# dateEndBill
	#
	$dateEndBill.Format = 'Short'
	$dateEndBill.Location = '40, 101'
	$dateEndBill.Name = "dateEndBill"
	$dateEndBill.Size = '254, 22'
	$dateEndBill.TabIndex = 8
	#
	# dateStartBill
	#
	$dateStartBill.Format = 'Short'
	$dateStartBill.Location = '40, 46'
	$dateStartBill.Name = "dateStartBill"
	$dateStartBill.Size = '254, 22'
	$dateStartBill.TabIndex = 7
	#
	# lblCSVFile
	#
	$lblCSVFile.Location = '209, 258'
	$lblCSVFile.Name = "lblCSVFile"
	$lblCSVFile.Size = '725, 23'
	$lblCSVFile.TabIndex = 8
	$lblCSVFile.TextAlign = 'MiddleRight'
	$lblCSVFile.Visible = $False
	#
	# btnProcess
	#
	$btnProcess.Location = '602, 225'
	$btnProcess.Name = "btnProcess"
	$btnProcess.Size = '75, 26'
	$btnProcess.TabIndex = 7
	$btnProcess.Text = "Process"
	$btnProcess.UseVisualStyleBackColor = $True
	$btnProcess.add_Click($btnProcess_Click)
	#
	# lblRows
	#
	$lblRows.Location = '52, 258'
	$lblRows.Name = "lblRows"
	$lblRows.Size = '882, 23'
	$lblRows.TabIndex = 2
	#
	# dgCSV
	#
	$dgCSV.DataMember = ""
	$dgCSV.HeaderForeColor = 'ControlText'
	$dgCSV.Location = '52, 284'
	$dgCSV.Name = "dgCSV"
	$dgCSV.Size = '882, 380'
	$dgCSV.TabIndex = 1
	#
	# btnOpenCSV
	#
	$btnOpenCSV.Location = '52, 25'
	$btnOpenCSV.Name = "btnOpenCSV"
	$btnOpenCSV.Size = '109, 29'
	$btnOpenCSV.TabIndex = 0
	$btnOpenCSV.Text = "Select CSV"
	$btnOpenCSV.UseVisualStyleBackColor = $True
	$btnOpenCSV.add_Click($btnOpenCSV_Click)
	#
	# ofdSelectCSV
	#
	$ofdSelectCSV.Filter = "csv files|*.csv"
	$ofdSelectCSV.add_FileOk($ofdSelectCSV_FileOk)
	#
	# labelBillPeriodStart
	#
	$labelBillPeriodStart.Location = '38, 20'
	$labelBillPeriodStart.Name = "labelBillPeriodStart"
	$labelBillPeriodStart.Size = '113, 18'
	$labelBillPeriodStart.TabIndex = 9
	$labelBillPeriodStart.Text = "Bill period start"
	#
	# labelBillPeriodEnd
	#
	$labelBillPeriodEnd.Location = '38, 76'
	$labelBillPeriodEnd.Name = "labelBillPeriodEnd"
	$labelBillPeriodEnd.Size = '100, 23'
	$labelBillPeriodEnd.TabIndex = 10
	$labelBillPeriodEnd.Text = "Bill period end"
	$dgCSV.EndInit()
	$groupbox2.ResumeLayout()
	$frmMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $frmMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$frmMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$frmMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$frmMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $frmMain.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
